
          CSI 402 -- Spring 2014 -- Solutions to Midterm Examination
          ----------------------------------------------------------
                 (Version II -- Yellow Exam Sheet)
                 ---------------------------------

Question I:
-----------

(a) No, SIC/XE is NOT an example of a load-store architecture. The reason
    is that an instruction such as ADD, which is not a load or store 
    instruction, requires operand fetch (from memory).

(b) Allowing a large number of registers increases the instruction
    length. (Another disadvantage: The time for context switch
    between processes also increases.)

(c) The binary search tree that results after inserting all the six
    symbols in the specified order is as follows.

                      LIVE
                       / \
                      /   \
                   BOAT   RIDE
                    /       \
                   /         \
                BEACH       SAVE
                               \
                                \
                               TEXT

     The height of the tree = 3.

(d) The instruction in binary = 0011 0010 0000 0000 0001 1011.

  The first six bits correspond to the opcode for the STA instruction.

  From the next six bits, we note that the n-bit = 1 and
  the other special bits (i, x, b, p, e) are all 0. So, 
  the 3-byte instruction uses indirect addressing. 

  The displacement specified = 0000 0001 1011 (binary) = 27 (decimal). 

  Since the instruction specifies indirect addressing, the
  effective address is given by the contents of location 27;
  thus, the effective address = 1800 (decimal).

  Thus, the contents of register A (i.e., the value 55) will be 
  stored in location 1800. (The other memory locations mentioned in
  the problem remain unchanged.)

  Hence, the final contents of the specified addresses are as follows:

     Address 19: 300   Address 27: 1800   Address 1800: 55

  
(e) The 6-bit opcode for JLT is 111000.

   The instruction uses PC-relative mode. So, the p-bit is 1 and
the other special bits (n, i, x, b and e) are all 0.

   To compute the displacement, note that the value of PC when the
instruction is executed = 340 + 3 = 343 (decimal). The LC-value
for the symbol LOOP is 325. So, the PC-relative displacement = 
325 - 343 = -18 (decimal).

             Now, +18 = 12 hex = 0000 0001 0010  (12 bit binary).
So, -18 in 2's complement form = 1111 1110 1110  (12 bit binary)

So, the instruction in binary is:

           111000 000010 1111 1110 1110

which is E02FEE in hex.

(f): The symbol table is given below.

           Symbol        LC-Value
           ------        --------
            MOD1            0
            BEGIN           0
            TRY             9
            STORE          23
            MEM            26
            MORE           29

============================================================================

Question II:
------------

Part (a): The output produced is shown below.

        6   q
       11   v
        0   k

Part (b): The output produced is shown below.

        4  -5  3
        6  -5  3
        6  -5  4
        9  -5  4

==========================================================================

Question III:
------------

Idea: We use recursion. 


#include <stdio.h>    /* To use NULL. */
#include <string.h>   /* To use the strlen function */

#define  SIZE  15

struct  tree_node {
   char  symbol[SIZE+1];
   struct tree_node *left_child, *right_child;
};

int  count (struct tree_node *rp, int minlen) {

  if (rp == NULL)  /* The tree is empty; so. */
     return 0;

  if ((rp->left_child == NULL) && (rp->right_child == NULL)) {

     /* The current node is a leaf. Check the length of the symbol
         and return 0 or 1 depending on the length.
     */

     if (strlen(rp->symbol) >= minlen)
         return 1;
     else
         return 0;
  }
  else {

     /* The current node is not a leaf. Use recursion to get
        the correct counts for the left and right subtrees and
        return the sum of the counts.
    */
        return  count(rp->left_child, minlen) +
                count(rp->right_child, minlen);
  }
} // End of count.


============================================================================

Question IV:
------------

Note: Students were not required to do the error checks carried
      out in the following solution. 

#include  <stdio.h>
#include  <stdlib.h>
#include  <string.h>

#define   NAME_MAX   30
#define   TITLE_MAX  20

struct   employee {
  char  name[NAME_MAX];        int  id_number;
  char  job_title[TITLE_MAX];  int  age;  float salary;
};


void  create_supervisor_file (char *in_file, char *out_file) {

  FILE *infp, *outfp;  /* Pointer for input and output files. */

  struct employee  temp;  /* To read from input file. */

  /* Open the input and output files. */

  if ((infp = fopen(in_file, "r")) == NULL) {
     fprintf(stderr, "Could not open input file.\n");
     exit(1);
  }

  if ((outfp = fopen(out_file, "w")) == NULL) {
     fprintf(stderr, "Could not open output file.\n");
     exit(1);
  }

  /* Read each record, check if the record corresponds to a "Supervisor";
     if so, write the appropriate fields to the output file.
  */ 

  while (fread((void *)&temp, sizeof(struct employee), 1, infp) == 1) {
    if (strcmp(temp.job_title, "Supervisor") == 0)
       fprintf(outfp, "%s %d %f\n", temp.name, temp.age, temp.salary);
  }

  /* Close the input and output files. */

  if (fclose(infp) == EOF) {
     fprintf(stderr, "Could not close input file.\n");
     exit(1);
  }

  if (fclose(outfp) == EOF) {
     fprintf(stderr, "Could not close output file.\n");
     exit(1);
  }

} /* End of create_supervisor_file. */

===============================================================================
